!From "An Introduction To Thermal Physics" by Daniel Schroeder
program ising
    ! Monte Carlo simulation of a 2D Ising model using the Metropolis algorithm
    size = 10
    ! Width of square lattice
    T = 2.25
    ! Temperature in units of J/k_B
    initialize
    for iteration = 1 to 100*size^2 do
        ! Main iteration loop
        i = random_integer(1,size)
        ! Choose a random row number
        j = random_integer(1,size)
        ! Choose a random column number
        call deltaU(i,j,Ediff)
        ! Compute ΔU of hypothetical flip
        if Ediff <= 0 then
            ! If flipping reduces or maintains energy ...
            s(i,j) = -s(i,j)
            ! Flip the spin
            colorsquare(i,j)
            ! Update visualization
        else
            ! Otherwise, flip with Boltzmann probability
            if rand < exp(-Ediff/T) then
                s(i,j) = -s(i,j)
                ! Flip the spin
                colorsquare(i,j)
                ! Update visualization
            end if
        end if
    next iteration
end program

subroutine deltaU(i,j,Ediff)
    ! Compute ΔU of flipping a spin (with periodic boundary conditions)
    if i = 1 then
        top = s(size,j)
    else
        top = s(i-1,j)
    end if
    if i = size then
        bottom = s(1,j)
    else
        bottom = s(i+1,j)
    end if
    if j = 1 then
        left = s(i,size)
    else
        left = s(i,j-1)
    end if
    if j = size then
        right = s(i,1)
    else
        right = s(i,j+1)
    end if
    Ediff = 2*s(i,j)*(top+bottom+left+right)
end subroutine

subroutine initialize
    ! Initialize to a random array
    for i = 1 to size
        for j = 1 to size
            if rand < 0.5 then
                s(i,j) = 1
            else
                s(i,j) = -1
            end if
            colorsquare(i,j)
        next j
    next i
end subroutine

subroutine colorsquare(i,j)
    ! Color a square according to s value (implementation depends on system)
end subroutine
