// Pseudocode for Visualization Module (Python-style structure)

Import modules: pandas as pd, matplotlib.pyplot as plt, numpy as np, mpl_toolkits.mplot3d.Axes3D, matplotlib.animation as animation

Function plot_observables(data_file):
    df = pd.read_csv(data_file)
    create figure with two subplots (ax1, ax2)
    
    ax1.plot(df['sweep'], df['energy'], label='Energy')
    ax1.set_xlabel('Sweep')
    ax1.set_ylabel('Total Energy')
    ax1.legend()
    
    ax2.plot(df['sweep'], df['magnetization'], label='Magnetization per spin', color='orange')
    ax2.set_xlabel('Sweep')
    ax2.set_ylabel('Magnetization')
    ax2.legend()
    
    tight_layout()
    show plot

Function visualize_2d_lattice(lattice_file):
    lattice = np.load(lattice_file)  // assume L x L array
    imshow(lattice, cmap='binary', interpolation='nearest')
    title('2D Ising Lattice Snapshot')
    colorbar(ticks=[-1, 1], label='Spin')
    show plot

Function visualize_3d_lattice(lattice_file):
    lattice = np.load(lattice_file)  // assume L x L x L array
    create colors array of shape lattice.shape + (4,)
    set colors where lattice == 1 to [1, 0, 0, 0.5]  // red
    set colors where lattice == -1 to [0, 0, 1, 0.5]  // blue
    
    create figure
    ax = add_subplot(111, projection='3d')
    ax.voxels(lattice != 0, facecolors=colors, edgecolor='k')
    set_title('3D Ising Lattice Snapshot')
    show plot

Function animate_observables(data_files):  // list of files for different T
    create figure, ax
    lines = []
    define update(frame):
        df = pd.read_csv(data_files[frame])
        line = ax.plot(df['sweep'], df['magnetization'], label=f'T={frame+1}')
        lines.append(line)
        ax.legend()
        return lines
    ani = FuncAnimation(fig, update, frames=len(data_files), interval=500)
    show plot

If __name__ == '__main__':
    plot_observables('ising_2d_data.csv')
    plot_observables('ising_3d_data.csv')
    // visualize_2d_lattice('lattice_2d.npy')  // if available
    // visualize_3d_lattice('lattice_3d.npy')